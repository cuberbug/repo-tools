#!/usr/bin/env bash
# ==============================================================================
# Вспомогательные утилиты для настройки и запуска Python-проектов.
# ------------------------------------------------------------------------------
# Содержит:
#   - Проверку системных зависимостей
#   - Универсальную функцию подтверждения действий
#   - Выбор интерпретатора Python
#   - Настройку виртуального окружения
# ==============================================================================


# ------------------------------------------------------------------------------
# Имя функции: check_dependencies
#
# Назначение:
#   Проверяет наличие системных зависимостей (Git и Python).
#
# Возвращаемые значения:
#   0 — если все зависимости найдены
#   1 — если отсутствует хотя бы одна зависимость
# ------------------------------------------------------------------------------
check_dependencies() {
    echo -e "${DECOR_BLUE} Проверка системных зависимостей...${RESET}"
    if ! command -v git &>/dev/null; then
        echo -e "${DECOR_ERROR} Git не найден. Пожалуйста, установите Git."
        return 1
    fi
    if ! command -v python3 &>/dev/null && ! command -v python &>/dev/null; then
        echo -e "${DECOR_ERROR} Python не найден. Пожалуйста, установите Python."
        return 1
    fi
    echo -e "${DECOR_GREEN} Все системные зависимости найдены.${RESET}"
    return 0
}


# ------------------------------------------------------------------------------
# Имя функции: confirm
#
# Назначение:
#   Запрашивает у пользователя подтверждение действия (да/нет).
#
# Аргументы:
#   $1 — текст сообщения (обязательно)
#   $2 — поведение по умолчанию (необязательно):
#         - "-n" → по умолчанию "нет"
#         - любое другое значение → по умолчанию "да"
#
# Возвращаемые значения:
#   0 — если пользователь подтвердил
#   1 — если отклонил
# ------------------------------------------------------------------------------
confirm() {
    local message=$1
    local default_choice=${2:-yes}
    local prompt_suffix

    if [[ "$default_choice" == "-n" ]]; then
        prompt_suffix="[y/N]"
    else
        prompt_suffix="[Y/n]"
    fi

    while true; do
        echo -ne "\n${DECOR_BLUE} ${BOLD}${message}?${RESET} ${prompt_suffix}: "
        read response

        if [[ "$default_choice" == "-n" ]]; then
            case "$response" in
                [Yy]*) return 0 ;;
                [Nn]* | "") return 1 ;;
                *) echo -e "${DECOR_BLUE} ${FG_YELLOW}Неверный ввод, попробуйте снова.${RESET}" ;;
            esac

        else
            case "$response" in
                [Yy]* | "") return 0 ;;
                [Nn]*) return 1 ;;
                *) echo -e "${DECOR_BLUE} ${FG_YELLOW}Неверный ввод, попробуйте снова.${RESET}" ;;
            esac
        fi
    done
}


# ------------------------------------------------------------------------------
# Имя функции: choose_python
#
# Назначение:
#   Определяет, какой Python-интерпретатор использовать.
#   Если переданный путь существует и исполняемый — возвращает его.
#   Иначе возвращает системный python3 или python.
#
# Аргументы:
#   $1 — путь до интерпретатора (необязательно)
#
# Возвращаемое значение:
#   Строка — путь к подходящему интерпретатору Python
# ------------------------------------------------------------------------------
choose_python() {
    local python_cmd=$1
    if [[ -n "$python_cmd" && -x "$python_cmd" ]]; then
        echo "$python_cmd"
    else
        command -v python3 || command -v python
    fi
}


# ------------------------------------------------------------------------------
# Имя функции: setup_venv
#
# Назначение:
#   Создаёт и настраивает виртуальное окружение Python.
#   При необходимости обновляет зависимости из requirements.txt.
#
# Аргументы (все обязательны):
#   --venv-dir <path>        — путь до директории виртуального окружения
#   --python <path>          — путь до бинарного файла python в окружении
#   --pip <path>             — путь до бинарного файла pip в окружении
#   --requirements <path>    — путь до файла зависимостей
#
# Возвращаемые значения:
#   0 — если окружение настроено успешно
#   1 — при ошибке создания или установки зависимостей
#
# Пример:
#   setup_venv --venv-dir "./.venv" \
#              --python "./.venv/bin/python" \
#              --pip "./.venv/bin/pip" \
#              --requirements "./requirements.txt"
# ------------------------------------------------------------------------------
setup_venv() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --venv-dir) venv_dir=$2; shift 2 ;;
            --python) python=$2; shift 2 ;;
            --pip) pip=$2; shift 2 ;;
            --requirements) requirements=$2; shift 2 ;;
            *) echo "Неизвестный аргумент: $1"; return 1 ;;
        esac
    done
    local venv_created

    if [[ -d "$venv_dir" ]]; then
        echo -e "${DECOR_GREEN} Найдено установленное виртуальное окружение Python."
    else
        echo -e "${DECOR_YELLOW_FG}Виртуальное окружение Python не установлено.${RESET}"
        echo -e "Вы можете установить его автоматически в директорию ${venv_dir}."

        if confirm "Установить виртуальное окружение"; then
            echo "Установка виртуального окружения..."
            local python_cmd="$(choose_python "${python}")"
            if ! "${python_cmd}" -m venv "${venv_dir}"; then
                echo -e "${DECOR_ERROR} Не удалось создать виртуальное окружение."
                return 1
            fi
            venv_created=true
        else
            echo -e "${DECOR_YELLOW_FG}Установка виртуального окружения была отменена.\n \
                     Продолжение выполнения программы небезопасно, так как будет использоваться \
                     системный интерпретатор Python, в котором могут отсутствовать обязательные \
                     для установки библиотеки.${RESET}"
            return 1
        fi
    fi

    if [[ "$venv_created" != true ]]; then
        if ! confirm "Проверить зависимости и обновить окружение"; then
            echo -e "${DECOR_YELLOW_FG}Проверка зависимостей была отменена.\n \
                    Если зависимости не установлены: рекомендуется обязательно их установить. \
                    Если зависимости установлены: рекомендуется регулярно проверять обновления${RESET}"
            return 1
        fi

        if [[ ! -f "$requirements" || ! -s "$requirements" ]]; then
            echo -e "${DECOR_GREEN} Проверка завершена, установка зависимостей не требуется."
            return 0
        fi
    fi

    echo -e "${DECOR_BLUE} Обновление пакетного менеджера и установка зависимостей..."
    "${python}" -m pip install --upgrade pip || return 1
    "${pip}" install -r "${requirements}" || return 1
    echo -e "${DECOR_GREEN_FG}Виртуальное окружение настроено и готово к использованию.${RESET}"
    return 0
}
